import random

# 부모 클래스 (Base Class)
class Person:
    """이름과 전화번호를 속성으로 가지는 사람 클래스"""
    def __init__(self, name, phone_number):
        self.name = name
        self.phone_number = phone_number

    # 객체를 문자열로 표현할 때 호출되는 메서드 (print() 함수에서 사용됨)
    def __str__(self):
        return f"이름: {self.name}, 연락처: {self.phone_number}"

# 자식 클래스 (Derived Class) - Person 클래스를 상속받음
class Employee(Person):
    """Person 클래스를 상속받아 '직업' 속성을 추가한 직원 클래스"""
    def __init__(self, name, phone_number, job):
        # 부모 클래스의 __init__ 메서드를 호출하여 name, phone_number를 초기화
        super().__init__(name, phone_number)
        # 자식 클래스만의 속성인 job을 추가로 초기화
        self.job = job

    # 부모 클래스의 __str__ 메서드를 오버라이딩(재정의)하여 직업 정보까지 출력
    def __str__(self):
        # 부모의 __str__ 메서드를 호출하여 기본 정보를 가져오고, 직업 정보를 덧붙임
        return f"{super().__str__()}, 직업: {self.job}"

# --- 10개의 테스트 데이터 생성 및 출력 ---
def run_tests():
    """10개의 테스트 케이스를 만들어 출력하는 함수"""
    
    # 테스트를 위한 샘플 데이터
    first_names = ["김", "이", "박", "최", "정", "강", "조", "윤", "장"]
    last_names = ["민준", "서준", "도윤", "예준", "시우", "하준", "지호", "서연", "하윤", "지우"]
    jobs = ["개발자", "디자이너", "기획자", "데이터 분석가", "인사담당자", "마케터"]

    employee_list = []

    print("--- 10명의 직원 정보 생성 ---")
    for i in range(10):
        # 랜덤으로 이름, 전화번호, 직업 생성
        random_name = random.choice(first_names) + random.choice(last_names)
        random_phone = f"010-{random.randint(1000, 9999)}-{random.randint(1000, 9999)}"
        random_job = random.choice(jobs)

        # Employee 객체를 생성하여 리스트에 추가
        employee = Employee(random_name, random_phone, random_job)
        employee_list.append(employee)

    print("\n--- 직원 정보 목록 출력 ---")
    # 생성된 직원 목록을 순회하며 정보 출력
    for i, employee in enumerate(employee_list):
        # __str__ 메서드가 자동으로 호출되어 형식에 맞게 출력됨
        print(f"{i+1:2d}. {employee}")


# 메인 코드 실행
if __name__ == "__main__":
    run_tests()